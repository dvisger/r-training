R Training: Intermediate
========================================================
author: 
date: 2019-09-17
width: 1440
height: 900
<style>
body {
    overflow: scroll;
}
</style>

Agenda
========================================================
  
  
- Introduction 
- Data Wrangling
- Break
- Visualization

Follow along in R by running what is in the code block  
  
Please install and load packages to start: 
```{r, eval=FALSE}
install.packages("tidyverse")
install.packages("nycflights13")  
```

```{r}
library(tidyverse)
library(nycflights13)
```

## Please ask questions as we go!

Introduction
=======================================================
-  Recap basics
-  Logistics
-  Import
-  Explore Data

Basics
=======================================================
-  Understand what R is and what its used for
-  Able to navigate around and use RStudio
-  Understand the main data types and ways data are organized
  - Double, Integer, Character, Logical
  - Vector, Matrix, Lists, Data frames
-  Understand how to use functions and packages
-  Able to import data into the environment
-  Able to create and use a project

Logistics
========================================================
```{r}
sessioninfo::platform_info()
```

Logistics
========================================================
```{r}
package <- sessioninfo::package_info(pkgs = c("dplyr", "tidyr", "nycflights13", "ggplot2") , dependencies = FALSE)
```
```{r, echo = FALSE}
library(kableExtra)
library(knitr)
kable(package) %>% scroll_box(width = "100%")
```


Import
========================================================
- Import csv with readr::read_csv
- Import excel with readxl::read_excel
- Import sas with haven::read_sas
- Connect to db with odbc/jdbc connectors
  - obdc with odbc package and connection pane (windows)
  - jdbc with RJDBC package (server)
  - DBI::dbGetQuery(connection_name, "SQL CODE")

Import
========================================================
- From a package:
```{r, eval = FALSE}
View(flights)
```
```{r, echo = FALSE}
kable(head(flights)) %>% scroll_box(width = "100%")
```


Explore Data
========================================================
- Simply click on df in Environment to preview, same as View(df)
- names(df) for column names
- head(df) for top 6 rows
- glimpse(df) for columns, data types and sample
- summary(df) for summary statistics
  - Min, Quartiles, mean, # of NAs


  
Data Wrangling 
========================================================

- Introduction to tidyverse 
- Data Wrangling Part 1: Subset
- Data Wrangling Part 2: Make new variables
- Data Wrangling Part 3: Combine data sets
- Data Wrangling Part 4: Summarizing

Data Wrangling 
========================================================

- **Introduction to tidyverse ** 
- Data Wrangling Part 1: Subset
- Data Wrangling Part 2: Make new variables
- Data Wrangling Part 3: Combine data sets
- Data Wrangling Part 4: Summarizing

tidyverse
========================================================
-  tidyverse is a set of packages developed to optimize R's vectorized operations  
-  requires "tidy data"
  -  each variable is a column
  -  each observations is a row
  -  unique values are in cells  
![tidy](tidy.PNG)  
source: https://r4ds.had.co.nz/tidy-data.html#fig:tidy-structure



dplyr basics
========================================================
- consistent and easy-to-use functions to wrangle data
- Main functions 
  - select
  - filter
  - arrange
  - mutate
  - joins: inner, left, anti
  - group_by
  - summarize
- first argument is data
- subsequent arguments describe what to do
- functions can be chained together with pipes: %>% 
- results in new data frame

Data Wrangling 
========================================================

- Introduction to tidyverse  
- **Data Wrangling Part 1: Subset**
- Data Wrangling Part 2: Make new variables
- Data Wrangling Part 3: Combine data sets
- Data Wrangling Part 4: Summarizing

Data Wrangling: Subset Objectives
========================================================

  - Subset on rows and columns 
  - Sort rows
  - Understand the use of the pipe operator


dplyr::select()  
========================================================
select specific columns
```{r, eval=FALSE}
View(cars)
```
<div align="center">
```{r, echo= FALSE}
kable(head(cars))
```
</div>

```{r}
select(cars, speed)

```


Your Turn
========================================================
incremental: true

data is cars  
variable to select is dist

```{r}
select(cars, dist)

```

dplyr::filter()
========================================================

filter rows with logical and boolean operators
```{r}
filter(cars, speed < 8)
```


Logical operators
========================================================

![logic](logic.PNG)

Source: https://rstudio-education.github.io/hopr/modify.html#logical-subsetting

Boolean operators
========================================================

![logic](boolean.PNG)

Source: https://rstudio-education.github.io/hopr/modify.html#logical-subsetting

dplyr::filter()  
========================================================

multiple logic joined with &
```{r, eval = FALSE}
filter(cars, speed < 8, dist < 10 )

```
or 
```{r}
filter(cars, speed < 8 & dist < 10 )
```

Your Turn
========================================================
incremental: true

data is cars  
where speed is less than 10 and dist is greater than 10  
```{r}
filter(cars, speed < 10, dist > 10)
```


dplyr::filter()  
========================================================

multiple conditions joined by a pipe (|) for or logic: 
```{r}
filter(cars, speed < 8 | dist < 10 )
```

Your Turn 
========================================================
incremental: true

data is cars
where speed is less than 10 **or** dist greater than 10

```{r}
filter(cars, speed < 10 | dist > 10)
```

 %>% 
========================================================

- Pipe: %>%  
- Takes the outputs from first function and passes as inputs to next function  
- String together functions  
- Shortcut: ctrl + shift + m  
- and then...


%>% 
========================================================

Using the select and filter together:
```{r}
select(cars, speed) %>% 
  filter(speed < 8 )
```

note: data argument is reused in subsequent functions when using pipes 

Your Turn
========================================================
incremental: true

Example:  
data is cars  
select dist variable and filter where dist less than 7  
```{r}
select(cars, dist) %>% 
  filter(dist <  7)
```


dplyr::arrange() 
========================================================

sort a table, by default ascending use desc() for descending
```{r}
arrange(cars, dist, desc(speed))
```

Your Turn 
========================================================
incremental: true

data is cars  
sort by descending speed then dist 
```{r}
arrange(cars, desc(speed), dist)
```

Data Wrangling 
========================================================

- Introduction to tidyverse  
- Data Wrangling Part 1: Subset
- **Data Wrangling Part 2: Make new variables**
- Data Wrangling Part 3: Combine data sets
- Data Wrangling Part 4: Summarizing

Data Wrangling: Make New Variables Objectives
========================================================

  - Use the mutate() function to create new variables
  - Use the case_when() function to create conditional values
  - Use window functions to create new variables
  - Use unite and separate functions
  
    
  
dplyr::mutate()
========================================================
  
Use the flights table
```{r, echo = FALSE}
kable(head(flights))%>% scroll_box(width = "100%")
```

dplyr::mutate()
========================================================
create a new distance per thousand miles measure
```{r, eval = FALSE}
new_var <- mutate(flights, kdistance = distance/1000)
```
```{r, echo=FALSE}
kable(head(mutate(flights, kdistance = distance/1000)))%>% scroll_box(width = "100%")
```

Your Turn
========================================================
incremental: true

Example:  
data is flights  
create new variable called air_time_hrs converts air_time to hours from minutes

```{r}
new_variable <- mutate(flights, air_time_hrs = air_time/60  )
```
```{r, echo = FALSE}
kable(head(new_variable)) %>% scroll_box(width = "100%")
```

dplyr::case_when()
========================================================
create a new indicator with mutate but using conditional logic 
```{r}
late <- mutate(flights,
                   dept_ind = case_when(dep_delay > 0 ~ "late",
                                   dep_delay < 0 ~ "early",
                                 TRUE ~ "on-time"))
```
```{r, echo=FALSE}
kable(head(late)) %>% scroll_box(width = "100%")
```

Your Turn
========================================================
incremental: true

Example:  
data flights  
create new variable air_time_type from air_time that breaks into long or short based on being longer than 120 minutes  
reminder:  case_when( condition1 ~ return1, condition2 ~ return2, TRUE ~ default)
```{r}
air_time <- mutate(flights, air_time_type = 
                     case_when(air_time > 120 ~ "Long",
                               TRUE ~ "Short"))
```

```{r, echo=FALSE}
kable(head(air_time)) %>% scroll_box(width = "100%")
```

mutate() and Window functions
========================================================
use window functions, aka analytic functions, with mutate  
see cheat sheet for many more examples 
```{r}
ntile <- mutate(flights, arr_delay_quartile = ntile(arr_delay, 4))
```

```{r, echo=FALSE}
kable(head(ntile)) %>% scroll_box(width = "100%")
```

tidyr::unite() 
========================================================
combine columns together with unite  
 

```{r}
unite_ex<- unite(flights, "flight_id", c(carrier, flight), remove = FALSE)
```
```{r, echo=FALSE}
kable(head(unite_ex)) %>% scroll_box(width = "100%")
```


tidyr::separate()
========================================================
separate columns 
```{r}
separate_ex <- separate(unite_ex, flight_id, c("carrier", "flight"))
```
```{r, echo=FALSE}
kable(head(separate_ex)) %>% scroll_box(width = "100%")
```

tidyr::separate()
========================================================
sep	argument  
  
Straight from ?separate:  
  
If character, is interpreted as a regular expression. The default value is a regular expression that matches any sequence of non-alphanumeric values.  
  
If numeric, interpreted as positions to split at. Positive values start at 1 at the far-left of the string; negative value start at -1 at the far-right of the string.

Your Turn
========================================================
incremental: true
 
data is flights  
combine origin and dest together into one field called flight_path, separate by -  
reminder to use c()  
```{r}
example <- unite(flights, "flight_path", c(origin, dest), sep = "-")
```
```{r, echo=FALSE}
kable(head(example)) %>% scroll_box(width = "100%")
```

Data Wrangling 
========================================================

- Introduction to tidyverse  
- Data Wrangling Part 1: Subset
- Data Wrangling Part 2: Make new variables
- **Data Wrangling Part 3: Combine data sets**
- Data Wrangling Part 4: Summarizing

Data Wrangling: Combine Data Sets Objectives
========================================================

-  Use dplyr join patterns
-  Understand exceptions and arguments

dplyr::left_join()
========================================================
look up values in a metadata store  
planes  
airports
```{r, echo = FALSE}
kable(head(planes)) 
kable(head(airlines))
```

dplyr::left_join()
========================================================
```{r}
plane_flights <- left_join(flights, planes)
```

```{r, echo=FALSE}
kable(head(plane_flights, n = 3L)) %>% scroll_box(width = "100%")
```


dplyr::left_join()
========================================================
Need to join by tailnum alone and not year
```{r}
plane_flights <- left_join(flights, planes, by = "tailnum")
```
```{r, echo=FALSE}
kable(head(plane_flights, n = 3L)) %>% scroll_box(width = "100%")
```

dplyr::left_join()
========================================================
specify a suffix to disambiguate overlapping fields
```{r}
plane_flights <- left_join(flights, planes, by = "tailnum", suffix = c("_flight","_plane"))
```
```{r, echo=FALSE}
kable(head(plane_flights, n =3L )) %>% scroll_box(width = "100%")
```

Your Turn
========================================================
incremental: true

data is flights  
join airlines and flights together
```{r}
flights_airlines <- left_join(flights, airlines, by = "carrier")
```
```{r, echo=FALSE}
kable(head(flights_airlines, n = 3L)) %>% scroll_box(width = "100%")
```

Data Wrangling 
========================================================

- Introduction to tidyverse  
- Data Wrangling Part 1: Subset
- Data Wrangling Part 2: Make new variables
- Data Wrangling Part 3: Combine data sets
- **Data Wrangling Part 4: Summarizing**

Data Wrangling: Summarizing Objectives
========================================================
- Use the group_by() function with summarize()  
- Use the spread() and gather() functions  
    
dplyr::group_by()
========================================================

aggregates to the distinct values of variables specified  
typically used with summarize() and then functions like n() or sum()

```{r}
flights %>% 
  group_by(carrier) %>% 
  summarize(count = n())
```

dplyr::group_by()
========================================================
default sum uses na.rm = FALSE
```{r}
flights %>% 
  group_by(carrier) %>% 
  summarize(count = n(),
            sum_delay = sum(arr_delay),
            avg_delay = sum_delay/ count)
```

dplyr::group_by()
========================================================
na.rm = TRUE corrects this
```{r}
flights %>% 
  group_by(carrier) %>% 
  summarize(count = n(),
            sum_delay = sum(arr_delay, na.rm = TRUE),
            avg_delay = sum_delay/ count)
```
dplyr::group_by()
========================================================
how to fix count to only count valid values?
```{r}
flights %>% 
  group_by(carrier) %>% 
  summarize(count = n(),
            delay_count = sum(!is.na(arr_delay)),
            sum_delay = sum(arr_delay, na.rm = TRUE),
            avg_delay = sum_delay/ delay_count)
```

tidyr::spread()
========================================================
make unique row values into columns   
Example: want to summarize month by carrier 
```{r}
carrier_month <- flights %>% 
  group_by(month, carrier) %>% 
  summarize(count = n()) %>% 
  spread(carrier, count)

```
```{r, echo = FALSE}
kable(head(carrier_month)) %>% scroll_box(width = "100%")
```


tidyr::gather()
=======================================================
the converse of spread--usually to make a data set tidy  
arguments: name of gathered variable, name of metric, columns to gather or exclude  
```{r}
carrier_month %>% 
  gather("Carrier", "count", -month)
```

Your Turn
=======================================================

Can you make this summary table using flights and airlines:  
```{r, echo = FALSE}
result <- left_join(flights, airlines) %>% 
  group_by(name, origin) %>% 
  summarize(count = n()) %>% 
  spread(origin, count) %>% 
  mutate(total = sum(EWR, JFK, LGA, na.rm = TRUE)) %>% 
  arrange(desc(total))

```
```{r, echo = FALSE}
kable(result)
```
***
Hint Need:
- left_join
- group_by
- summarize
- spread
- mutate
- arrange

Answer & Break time
=======================================================
```{r}
result <- left_join(flights, airlines) %>% 
  group_by(name, origin) %>% 
  summarize(count = n()) %>% 
  spread(origin, count) %>% 
  mutate(total = sum(EWR, JFK, LGA, na.rm = TRUE)) %>% 
  arrange(desc(total))

```


Visualization
=======================================================

- Overview of ggplot
- Geom
- Stat transformations
- Position Adjustments
- Scales
- Coordinate system
- Facets
- Labels and Annotation  

![graph](graph.gif) 

Visualization
=======================================================

- **Overview of ggplot**
- Geom
- Stat transformations
- Position Adjustments
- Scales
- Coordinate system
- Facets
- Labels and Annotation

ggplot2
=======================================================

- popular and robust package for building graphs
    - gg = grammar of graphics  
- main function is ggplot() with many functions used in support  
- builds graphic elements layer by layer
- a plus sign (+) is used between elements
- can be overwhelming
  - keep in mind the framework 
  - use the cheatsheet


ggplot2:ggplot()
=======================================================

Layers and main arguments needed:  
-  data = the data being plotted  
-  geom = the geometric objects (circles, lines, etc.) that appear on the plot   
-  aes = a set of mappings from variables in the data to the aesthetics (appearance) of the geometric objects    
-  stat = a statistical transformation used to calculate the data values used in the plot  
-  position = a position adjustment for locating each geometric object on the plot  
-  scale_ = a scale (e.g., range of values) for each aesthetic mapping used     
-  coor_ = a coordinate system used to organize the geometric objects  
-  facet_ = the facets or groups of data shown in different plots  

https://uc-r.github.io/ggplot_intro

ggplot2:ggplot()
=======================================================

generic template:  
```{r, eval = FALSE}
ggplot(data, general aesthetic mapping) +  
  geometric layers(unique aesthetic mapping,  
                  stat properties,  
                  position properties) +  
  stat calculations() +
  scale properties() +  
  coordinate properties() +  
  facet properties() +  
  label properties()
  
```


Visualization
=======================================================

- Overview of ggplot
- **Geom**
- Stat transformations
- Position Adjustments
- Scales
- Coordinate system
- Facets
- Labels and Annotation

geom
=======================================================
no geom:  
```{r, fig.align = 'center', fig.width= 18}
library(ggplot2)
ggplot(data= cars, mapping = aes(speed,dist))
```

geom
=======================================================
- each geom has its required or optional aesthetic mappings:  
  - geom_area: x, y, alpha, color, fill, linetype, size
- geoms can inherit the data and some mapping arguments from initial ggplot function  
- each geom has set default stat and position 
  - geom_point: 
      stat = "count"  
      position = "identity"  
- use help to see defaults: ?geom_name

geom
=======================================================
scatter plot
```{r, fig.align = 'center', fig.width= 18}
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
  geom_point()
```

geom
=======================================================
scatter plot
```{r, fig.align = 'center', fig.width= 18}
ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) +
  geom_point()
```

Check-in
=======================================================
incremental: true
what happens if aesthetics are moved down into geom?
```{r, fig.align = 'center', fig.width= 18}
ggplot(mpg) +
  geom_point(aes(x = cty, y = hwy, color = class))
```

geom
=======================================================
layers  
scatter plot + smooth
```{r, fig.align = 'center', fig.width= 18}
ggplot(mpg, aes(cty, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(method = "lm") #default method is "loess"
```

geom
=======================================================
histogram
```{r, fig.align = 'center', fig.width= 18}
ggplot(mpg, aes(hwy))+
  geom_histogram(binwidth = 5)
```

geom
=======================================================
bar plot
```{r, fig.align = 'center', fig.width= 18}
ggplot(mpg, aes(class))+
  geom_bar()
```

Check-in
=======================================================
incremental: true
When to use a bar plot vs histogram?  
Bar gets discrete & histogram is continuous

Visualization
=======================================================

- Overview of ggplot
- Geom
- **Stat transformations**
- Position Adjustments
- Scales
- Coordinate system
- Facets
- Labels and Annotation

Stat Transformations
=======================================================
- Most geoms use stat = "identity" as a default
  - A few exceptions: histogram & bar use stat = "count"
- New geom layers of summarized data can be used with stat_summary

Stat Transformations
=======================================================
bar plot with stat = "identity"  
```{r, fig.align = 'center', fig.width= 18}
count(mpg, class) %>% 
  ggplot(aes(class, n)) +
  geom_bar(stat = "identity")
```
Stat Transformations
=======================================================
using stat_summary 
```{r, fig.align = 'center', fig.width= 18}
ggplot(mtcars, aes(cyl, mpg)) + 
  geom_point() + 
  stat_summary(fun.y = "mean", color = "red", size = 4, geom = "point")
```

Check-in
=======================================================
incremental: true
  
Can you use the same data source to plot multiple stats in one graph?  
  
Yes! You can calculate various measures and add them as different layers

Visualization
=======================================================

- Overview of ggplot
- Geom
- Stat transformations
- **Position Adjustments**
- Scales
- Coordinate system
- Facets
- Labels and Annotation

Position Adjustments
=======================================================

-  How components show in relation to each other  
-  Defaults can be looked up in documentation ?geom_type


Position Adjustments
=======================================================
left: 50%
```{r, fig.align = 'center', fig.width= 9}
ggplot(mpg,aes(cty, hwy)) +
  geom_point()
```
***
```{r, fig.align = 'center', fig.width= 9}
ggplot(mpg,aes(cty, hwy)) +
  geom_point(position = "jitter")
```

Position Adjustments
========================================================

```{r,fig.align = 'center', fig.width= 9 }
ggplot(mpg, aes(x = class, fill = drv)) + 
  geom_bar()
```
***
```{r,fig.align = 'center', fig.width= 9 }
ggplot(mpg, aes(x = class, fill = drv)) + 
  geom_bar(position = "dodge")
```

Check-in
=======================================================
incremental: true
  
Where does the position argument go?  
  
As a first level argument of the geom  

Visualization
=======================================================

- Overview of ggplot
- Geom
- Stat transformations
- Position Adjustments
- **Scales**
- Coordinate system
- Facets
- Labels and Annotation

Scales
======================================================
  
- Scale functions customize the scales:     
  - functions are named: scale + aesthetic parameter + scale type
- Defaults are based on data type for aesthetic mappings  
```{r, fig.align = 'center', fig.width= 18}

ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) +
  geom_point() +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete()
  
```

Scales
=======================================================
Break hwy scale into increments of 2
```{r, fig.align = 'center', fig.width= 18}

ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) +
  geom_point() +
  scale_y_continuous(breaks = seq(10, 46, by = 2)) 

```

Check-in
=======================================================
incremental: true
If I wanted to see the default parameters for a date x scale what would I do?
  
run ?scale_x_date in the console

Visualization
=======================================================

- Overview of ggplot
- Geom
- Stat transformations
- Position Adjustments
- Scales
- **Coordinate system**
- Facets
- Labels and Annotation

Coordinate system
=======================================================
- Layers added to change the coordinates  
- Most common used functions are:  
  -coord_cartesian(xlim = , ylim =)  
  -coord_flip()

Coordinate system
=======================================================
```{r, fig.align = 'center', fig.width= 18}

ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) +
  geom_point() +
  coord_cartesian(xlim = c(20, 30), ylim = c(20,30))
  
```
note: if you use xlim() and ylim() functions instead it will *delete* those points which alter stats and models in the graph

Check-in
=======================================================
incremental: true
  
What coordinate option would you use if you had long names in the x axis?
  
coor_flip()

Visualization
=======================================================

- Overview of ggplot
- Geom
- Stat transformations
- Position Adjustments
- Scales
- Coordinate system
- **Facets**
- Labels and Annotation

Facets
=======================================================
- Allows for subplots to be built based on discrete variables  
- Two functions
  - facet_grid
  - facet_wrap
- By default uses the same scales across the facet
  - Argument to change this is scales = "free"

Facets
=======================================================
facet_grid makes subplots based on categorical variables where you specify the row and column variables

```{r, fig.align = 'center', fig.width= 18}

ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) +
  geom_point() +
  facet_grid(rows = vars(year), cols = vars(cyl))
  
```

Facets
=======================================================
facet_wrap takes discrete variables and wraps the subplots into a rectangle 

```{r, fig.align = 'center', fig.width= 18}

ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) +
  geom_point() +
  facet_wrap(facets = vars(cyl, drv), scales = "free_y")
  
```

Check-in
=======================================================
incremental: true
  
What kind of variable can you facet graphs for?
  
Discrete

Visualization
=======================================================

- Overview of ggplot
- Geom
- Stat transformations
- Position Adjustments
- Scales
- Coordinate system
- Facets
- **Labels and Annotation**

Labels
=======================================================
Labels are added with the labs function:

```{r, fig.align = 'center', fig.width= 18}

ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  labs(title = "Fuel Efficiency by Engine Power",
       subtitle = "Fuel economy data from 1999 and 2008 for 38 popular models of cars",
       x = "Engine power (litres displacement)",
       y = "Fuel Efficiency (miles per gallon)",
       color = "Car Type")
```

Annotations
=======================================================
add a geom layer added with geom_label or geom_text  
add an annotation in the coordinate system

```{r, fig.align = 'center', fig.width= 18}

best_in_class <- mpg %>%
  group_by(class) %>%
  filter(row_number(desc(hwy)) == 1)

ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(position = "jitter") +
  geom_text(data = best_in_class, aes(label = model), hjust = 0, nudge_x = 0.05 )+
  annotate("text", label = "random annotation", x = 5, y = 35, size = 8, color = "red")
```

Check-in
=======================================================
incremental: true
  
What argument to specify titles for charts or axis?
  
labs()

Saving a graph
======================================================
use ggsave() to save a chart  
embed in a pdf/html report 

```{r, eval = FALSE}
ggsave("R Intermediate/sample.png", width = 5, height = 5)
```


Homework
======================================================
  
    
Bonus!!  

Make a chart relevant to your data send to me and I will post on the confluence page!



Where to learn more
=======================================================
-  Presentation can be found in workshop page (download icon after clicking):  
https://confluence.ag.com/display/BI/Intermediate%3A+Analyzing+in+R
-  Code from workshops can be found at:
https://github.com/dvisger/r-training  
-  Sign up for Intermediate & Advanced Workshops:  
https://confluence.ag.com/display/BI/Workshops  
-  Compiled Online Resources:  
https://confluence.ag.com/display/BI/Online+resources
-  Go to a local R meetup:
https://www.meetup.com/Cleveland-UseR-Group/
-  Reach out to me or send message in AG’s #help-r slack channel


References
=======================================================

http://r-statistics.co/Complete-Ggplot2-Tutorial-Part1-With-R-Code.html  
https://uc-r.github.io/ggplot_intro  
https://r4ds.had.co.nz/index.html  

